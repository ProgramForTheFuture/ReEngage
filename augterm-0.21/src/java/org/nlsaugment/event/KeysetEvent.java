/**
 * Copyright Â© 2006 Jonathan M. Cheyer
 * All rights reserved.
 * 
 * Licensed under GPL Version 2.
 * http://www.gnu.org/licenses/gpl.html
 */
package org.nlsaugment.event;

public final class KeysetEvent {
  // Unable to extend java.awt.event.InputEvent because constructor is package-level

  public static final int KEY0 = 0;
  public static final int KEY1 = 1;
  public static final int KEY2 = 2;
  public static final int KEY3 = 3;
  public static final int KEY4 = 4;

  public static final int KEYSET_RELEASED = 0;
  public static final int KEYSET_PRESSED = 1;
  public static final int KEYSET_TYPED = 2;

  public static final int VK_UNDEFINED = 0;
  public static final char CHAR_UNDEFINED = (char) 65535;

  private final int _type;
  private final long _when;
  private final char _keyChar;
  private final int _keyCode;

  // TODO: these should go in a properties file
  private static final String __keysetError1 = "type is not KEYSET_RELEASED, KEYSET_PRESSED, or KEYSET_TYPED.";
  private static final String __keysetError2 = "type is KEY_TYPED and keyChar is CHAR_UNDEFINED; or if type is KEY_TYPED and keyCode is not VK_UNDEFINED.";
  private static final String __keysetError3 = "type is KEYSET_PRESSED or KEYSET_RELEASED and keyChar is not CHAR_UNDEFINED.";

  /**
   * @param type an integer identifying the type of event. Valid types are KEYSET_RELEASED, KEYSET_PRESSED, or KEYSET_TYPED.
   * @param when a long integer that specifies the time the event occurred.
   * @param keyCode the integer code for an actual key, or VK_UNDEFINED (for a key-typed event)
   * @param keyChar the Unicode character generated by this event, or CHAR_UNDEFINED (for key-pressed and key-released events which do not map to a valid Unicode character).
   * @throws IllegalArgumentException if type is not KEYSET_RELEASED, KEYSET_PRESSED, or KEYSET_TYPED.
   * @throws IllegalArgumentException if type is KEY_TYPED and keyChar is CHAR_UNDEFINED; or if type is KEY_TYPED and keyCode is not VK_UNDEFINED.
   * @throws IllegalArgumentException if type is KEYSET_PRESSED or KEYSET_RELEASED and keyChar is not CHAR_UNDEFINED.
   */
  public KeysetEvent(final int type, final long when, final int keyCode, final char keyChar) throws IllegalArgumentException {
    super();
    if (type != KEYSET_RELEASED && type != KEYSET_PRESSED && type != KEYSET_TYPED) {
      throw new IllegalArgumentException(__keysetError1);
    }

    if ((type == KEYSET_TYPED && keyChar == CHAR_UNDEFINED) || (type == KEYSET_TYPED && keyCode != VK_UNDEFINED)) {
      throw new IllegalArgumentException(__keysetError2);
    }
    if ((type == KEYSET_PRESSED || type == KEYSET_RELEASED) && (keyChar != CHAR_UNDEFINED)) {
      throw new IllegalArgumentException(__keysetError3);
    }
    this._type = type;
    this._when = when;
    this._keyChar = keyChar;
    this._keyCode = keyCode;
  }

  public int getType() {
    return this._type;
  }

  public long getWhen() {
    return this._when;
  }

  public char getKeyChar() {
    return this._keyChar;
  }

  public int getKeyCode() {
    return this._keyCode;
  }
}
